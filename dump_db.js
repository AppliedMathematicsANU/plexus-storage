// Generated by CoffeeScript 1.6.3
var Q, data, fs, input_path, input_storage, input_type, printNicely;

Q = require('q');

fs = require('fs');

printNicely = function(data) {
  var entry, k, keys, _i, _len, _results;
  keys = (function() {
    var _results;
    _results = [];
    for (k in data.predecessors) {
      _results.push(k);
    }
    return _results;
  })();
  keys.sort();
  _results = [];
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    k = keys[_i];
    entry = {
      predecessors: data.predecessors[k],
      headers: data.headers[k],
      deviations: data.deviations[k],
      details: data.details[k]
    };
    console.log("" + k + ":");
    console.log(JSON.stringify(entry, null, 4));
    _results.push(console.log());
  }
  return _results;
};

if ((typeof module !== "undefined" && module !== null) && !module.parent) {
  input_type = process.argv[2];
  input_path = process.argv[3];
  input_storage = require("./" + input_type + "_storage");
  Q.longStackSupport = true;
  data = {};
  Q.nfcall(input_storage, input_path).then(function(db) {
    return Q.ninvoke(db, 'readDependencyGraph').then(function(val) {
      return data.predecessors = val;
    }).then(function() {
      var k;
      return Q.ninvoke(db, 'readSomeHeaders', (function() {
        var _results;
        _results = [];
        for (k in data.predecessors) {
          _results.push(k);
        }
        return _results;
      })());
    }).then(function(val) {
      return data.headers = val;
    }).then(function() {
      var k;
      return Q.ninvoke(db, 'readSomeDeviations', (function() {
        var _results;
        _results = [];
        for (k in data.predecessors) {
          _results.push(k);
        }
        return _results;
      })());
    }).then(function(val) {
      return data.deviations = val;
    }).then(function() {
      var k;
      data.details = {};
      return ((function() {
        var _results;
        _results = [];
        for (k in data.predecessors) {
          _results.push((function(k) {
            return function() {
              return Q.ninvoke(db, 'readSingleNodeDetails', k).then(function(val) {
                return data.details[k] = val;
              });
            };
          })(k));
        }
        return _results;
      })()).reduce(Q.when, Q());
    }).then(function() {
      return printNicely(data);
    }).done();
  });
}
